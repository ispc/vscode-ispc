================================================================================
Function templates
================================================================================

template <typename T> T add(T a, T b) { return a + b; }
template <typename T, typename U> T add(T a, U b) { return a + b; }

---

(translation_unit
    (template_declaration
        parameters: (template_parameter_list
            (type_parameter_declaration
                (type_identifier)
            )
        )
        (function_definition
            type: (type_identifier)
            declarator: (function_declarator
                declarator: (identifier)
                parameters: (parameter_list
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                )
            )
            body: (compound_statement
                (return_statement
                    (binary_expression
                        left: (identifier)
                        right: (identifier)
                    )
                )
            )
        )
    )
    (template_declaration
        parameters: (template_parameter_list
            (type_parameter_declaration
                (type_identifier)
            )
            (type_parameter_declaration
                (type_identifier)
            )
        )
        (function_definition
            type: (type_identifier)
            declarator: (function_declarator
                declarator: (identifier)
                parameters: (parameter_list
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                )
            )
            body: (compound_statement
                (return_statement
                    (binary_expression
                        left: (identifier)
                        right: (identifier)
                    )
                )
            )
        )
    )
)

================================================================================
Function template instantiation
================================================================================

template int add(int a, int b);

---

(translation_unit
    (template_instantiation
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list
                (parameter_declaration
                    type: (primitive_type)
                    declarator: (identifier)
                )
                (parameter_declaration
                    type: (primitive_type)
                    declarator: (identifier)
                )
            )
        )
    )
)

================================================================================
Template function
================================================================================

template <typename T> T add(T a, T b) { return a + b; }

void foo() {
    int i1 = add<int>(1, 2);
    varying int i2 = add<varying int>(1, 2);
    uniform int i3 = add<uniform int>(1, 2);
}

---

(translation_unit
    (template_declaration
        parameters: (template_parameter_list
            (type_parameter_declaration
                (type_identifier)
            )
        )
        (function_definition
            type: (type_identifier)
            declarator: (function_declarator
                declarator: (identifier)
                parameters: (parameter_list
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                    (parameter_declaration
                        type: (type_identifier)
                        declarator: (identifier)
                    )
                )
            )
            body: (compound_statement
                (return_statement
                    (binary_expression
                        left: (identifier)
                        right: (identifier)
                    )
                )
            )
        )
    )
    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list)
        )
        body: (compound_statement
            (declaration
                type: (primitive_type)
                declarator: (init_declarator
                    declarator: (identifier)
                    value: (call_expression
                        function: (template_function
                            name: (identifier)
                            arguments: (template_argument_list
                                (type_descriptor
                                    type: (primitive_type)
                                )
                            )
                        )
                        arguments: (argument_list
                            (number_literal)
                            (number_literal)
                        )
                    )
                )
            )
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (init_declarator
                    declarator: (identifier)
                    value: (call_expression
                        function: (template_function
                            name: (identifier)
                            arguments: (template_argument_list
                                (type_descriptor
                                    (type_qualifier)
                                    type: (primitive_type)
                                )
                            )
                        )
                        arguments: (argument_list
                            (number_literal)
                            (number_literal)
                        )
                    )
                )
            )
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (init_declarator
                    declarator: (identifier)
                    value: (call_expression
                        function: (template_function
                            name: (identifier)
                            arguments: (template_argument_list
                                (type_descriptor
                                    (type_qualifier)
                                    type: (primitive_type)
                                )
                            )
                        )
                        arguments: (argument_list
                            (number_literal)
                            (number_literal)
                        )
                    )
                )
            )
        )
    )
)
