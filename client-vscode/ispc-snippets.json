{
  "struct": {
    "prefix": "struct",
    "body": "\nstruct ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};\n",
    "description": "Code snippet for struct",
    "scope": "source.ispc"
  },
  "union": {
    "prefix": "union",
    "body": "\nunion ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};\n",
    "description": "Code snippet for union",
    "scope": "source.ispc"
  },
  "if": {
    "prefix": "if",
    "body": "\nif (${1:/* condition */}) {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if()",
    "scope": "source.ispc"
  },
  "cif": {
    "prefix": "cif",
    "body": "\ncif (${1:/* condition */}) {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for coherent control flow cif()",
    "scope": "source.ispc"
  },
  "ifel": {
    "prefix": "ifel",
    "body": "\nif (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if() else",
    "scope": "source.ispc"
  },
  "cifel": {
    "prefix": "cifel",
    "body": "\ncif (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for coherent control flow cif() else",
    "scope": "source.ispc"
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": "\nif (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse if(${3:/* condition */}) {\n\t${4:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if() else if() else",
    "scope": "source.ispc"
  },
  "cifelif": {
    "prefix": "ifelif",
    "body": "\ncif (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse cif(${3:/* condition */}) {\n\t${4:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for coherent control flow cif() else cif() else",
    "scope": "source.ispc"
  },
  "else": {
    "prefix": "else",
    "body": "\nelse\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for else",
    "scope": "source.ispc"
  },
  "elif": {
    "prefix": "elif",
    "body": "\nelse if (${1:/* condition */})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for else if ()",
    "scope": "source.ispc"
  },
  "switch": {
    "prefix": "switch",
    "body": "\nswitch (${1:expression})\n{\n\tcase ${2:/* constant-expression */}:\n\t\t${3:/* code */}\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n}",
    "description": "Code snippet for switch",
    "scope": "source.ispc"
  },
  "do": {
    "prefix": "do_",
    "body": "\ndo\n{\n\t${0:/* code */}\n} while (${1:/* condition */});\n",
    "description": "Code snippet for do while loop",
    "scope": "source.ispc"
  },
  "cdo": {
    "prefix": "cdo",
    "body": "\ncdo\n{\n\t${0:/* code */}\n} while (${1:/* condition */});\n",
    "description": "Code snippet for cdo while loop",
    "scope": "source.ispc"
  },
  "for": {
    "prefix": "for",
    "body": "\nfor(${1:size_t} ${2:i} = 0; $2 < ${3:count}; ${4:$2++})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for for loop",
    "scope": "source.ispc"
  },
  "forr": {
    "prefix": "forr",
    "body": "\nfor(int ${1:i} = ${2:length} - 1; $1 >= 0; ${3:$1--})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for reverse for loop",
    "scope": "source.ispc"
  },
  "fore": {
    "prefix": "foreach",
    "body": "\nforeach(${1:var} = ${2:init} ... ${3:num})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for foreach loop",
    "scope": "source.ispc"
  },
  "fore2": {
    "prefix": "foreach2",
    "body": "\nforeach(${1:var} = ${2:init} ... ${3:num}, ${4:var} = ${5:init} ... ${6:num} )\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for double foreach loop",
    "scope": "source.ispc"
  },
  "foret": {
    "prefix": "foreach_tiled",
    "body": "\nforeach(${1:var} = ${2:init} ... ${3:num}, ${4:var} = ${5:init} ... ${6:num} )\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for double foreach loop",
    "scope": "source.ispc"
  },
  "forea": {
    "prefix": "foreach_active",
    "body": "\nforeach_active(${1:var})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for foreach loop",
    "scope": "source.ispc"
  },
  "while": {
    "prefix": "while",
    "body": "\nwhile(${1:/* condition */}){\n\t${2:/* code */}\n}\n",
    "description": "Code snippet for while loop",
    "scope": "source.ispc"
  },
  "cwhile": {
    "prefix": "cwhile",
    "body": "\ncwhile(${1:/* condition */}){\n\t${2:/* code */}\n}\n",
    "description": "Code snippet for cwhile loop",
    "scope": "source.ispc"
  },
  "ifd": {
    "prefix": "ifnd",
    "body": "\n#if defined($1)\n\n${0}\n\n#endif // $1\n",
    "description": "Code snippet for if defined()",
    "scope": "source.ispc"
  },
  "ifnd": {
    "prefix": "ifnd",
    "body": "\n#if !defined($1)\n#define ${1:MACRO}\n\n${0}\n\n#endif // $1\n",
    "description": "Code snippet for if !defined()",
    "scope": "source.ispc"
  },
  "mitl": {
    "prefix": "mitl",
    "body": "\n// The MIT License (MIT)\n\n// Copyright (c) ${1:YEAR} ${2:NAME}\n\n//  Permission is hereby granted, free of charge, to any person obtaining a\n//  copy of this software and associated documentation files (the \"Software\"),\n//  to deal in the Software without restriction, including without limitation\n//  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n//  and/or sell copies of the Software, and to permit persons to whom the\n//  Software is furnished to do so, subject to the following conditions:\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//  DEALINGS IN THE SOFTWARE.\n\n${0:/* code */}\n",
    "description": "Code snippet for MIT License",
    "scope": ""
  }
}
