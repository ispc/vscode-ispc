<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Workspace.VSIntegration.Contracts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments">
            <summary>
            Arguments to supply to
            <see cref="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService2.OpenWorkspaceAsync(System.String,Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.EnableFileWatcher">
            <summary>
            Gets or sets whether to create a workspace using a file watching service. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.AddToWorkspaceHistory">
            <summary>
            Gets or sets whether to add the opened workspace to the Visual Studio MRU or Windows Jump List.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.IndexedElements">
            <summary>
            Gets or sets which types of indexing types are generated during indexing if any. Default is
            <see cref="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.All"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.WorkspaceFactoryProviders">
            <summary>
            Gets or sets the workspace factory providers used to provide workspace functionality. The MEF provided
            set of providers can be generated by <see cref="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService.CreateDefaultFactoryProviders"/>.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments.InitialFilter">
            <summary>
            Gets or sets the default <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/> to enable on the initial tree visualization. Default is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService">
            <summary>
            IVsCustomWorkspaceService interface to support full control on how a workspace is created with respect
            of the providers it will consume
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService.CreateDefaultFactoryProviders">
            <summary>
            Return the default factory providers
            </summary>
            <returns>Default factory providers instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService.OpenWorkspaceAsync(System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Workspace.Indexing.IndexElement,Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders)">
            <summary>
            Create a custom workspace to be displayed in VS
            </summary>
            <param name="path">Path to directory to open</param>
            <param name="enableFileWatcher">If a file watcher is desired</param>
            <param name="addToWorkspaceHistory">A value indicating whether the workspace path should be added to VS MRU and Windows jump list.</param>
            <param name="elements">Which indexing elements are enabled</param>
            <param name="workspaceFactoryProviders">An optional workspace factory providers instance</param>
            <returns>Created workspace to be displayed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService2">
            <summary>
            Extended functionality of <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService"/> which
            allows for more workspace open customization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService2.OpenWorkspaceAsync(System.String,Microsoft.VisualStudio.Workspace.VSIntegration.CustomWorkspaceArguments)">
            <summary>
            Create a custom workspace to be displayed in VS
            </summary>
            <param name="path">Path to directory to open</param>
            <param name="arguments">
            Arguments to control the behavior, capabilities, and visuals of the workspace.
            </param>
            <returns>Created workspace to be displayed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.Contracts.IVsFolderWorkspaceService">
            <summary>
            Folder Workspace Service for VS
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionMSBuildProjectServiceFactory">
            <summary>
            Interface IVsSolutionMSBuildProjectServiceFactory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionMSBuildProjectServiceFactory.GetMSBuildProjectDataServiceAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the MsBuild project data service for a particular configuration.
            <para>If the parameter passed is null, then the service for active configuration is returned.</para>
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="projectConfiguration">Project configuration</param>
            <param name="projectProperties">Project properties</param>
            <returns>MsBuild project data service instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService">
            <summary>
            Interface IVsSolutionWorkspaceNugetService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetProjectJsonDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets data stored in the project.json file included in the project.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Data stored in the project.json file included in the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetPackagesConfigDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets data stored in the packages.config file included in the project.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Collection of <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData"/> objects</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetPackageReferenceDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the package reference data included in the project file.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Package reference data included in the project file.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService">
            <summary>
            Interface IVsSolutionWorkspaceService
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.SolutionFile">
            <summary>
            The active solution file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.ActiveConfiguration">
            <summary>
            The active configuration
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BeginProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.EndProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.OpenSolutionWorkspace(System.String)">
            <summary>
            Open a solution
            </summary>
            <param name="solutionPath">Path to a solution file</param>
            <returns>A new solution workspace being created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.CloseActiveWorkspace">
            <summary>
            Close the Active workspace
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BuildProject(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.BuildType,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project by invoking a build context actions from a provider
            </summary>
            <param name="projectFile">The target project file</param>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="buildType">The desired build type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BuildProjects(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.VisualStudio.Workspace.Build.BuildType,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build multiple project files from a solution
            </summary>
            <param name="projectFiles">List of project files to build</param>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="buildType">The desired build type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.GetManagedCommandLineInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the managed command line info.
            </summary>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with a dictionary map of command line info</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory">
            <summary>
            IVsWorkspaceFactory interface to provide abstraction on Active IWorkspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory.CurrentWorkspace">
            <summary>
            The active workspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory.OnActiveWorkspaceChanged">
            <summary>
            Active workspace changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants">
            <summary>
            Constants related to Nuget provider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.ProjectJsonDataValueType">
            <summary>
            Identifier of the project.json data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackagesConfigDataValueType">
            <summary>
            Identifier of the packages.config data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackageReferenceDataValueType">
            <summary>
            Identifier of the package reference data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackagesConfigFileName">
            <summary>
            Name of the packages.config file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.ProjectJsonFileName">
            <summary>
            Name of the project.json file
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData">
            <summary>
            Package reference data in the project file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData.Name">
            <summary>
            Name of the package reference
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData.Version">
            <summary>
            Version of the package reference
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData">
            <summary>
            Package data in the packages.config file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.PackageId">
            <summary>
            Package id
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.Version">
            <summary>
            Package version
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.TargetFramework">
            <summary>
            Target framework of the package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.DevelopmentDependency">
            <summary>
            Is the package a development dependency?
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.SVsCustomWorkspaceService">
            <summary>
            type of <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsCustomWorkspaceService" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.SVsSolutionWorkspaceService">
            <summary>
            type of IVsSolutionWorkspaceService
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute">
            <summary>
            <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> for exporting an <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute"/> class.
            </summary>
            <param name="type">unique string for this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/></param>
            <param name="view">view this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/> belongs to. </param>
            <param name="priority">priority in the list of providers for a view</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute.ViewName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute">
            <summary>
            <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> for exporting an INodeExtender
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute"/> class.
            </summary>
            <param name="views">views this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender"/> belongs to. Default is <see cref="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.KnownViews.PhysicalTree"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute"/> class.
            </summary>
            <param name="view">view this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender"/> belongs to.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeExtenderAttribute.ViewNames">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource">
            <summary>
            Provides children nodes of a node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.Extender">
            <summary>
            Gets extender object that created this source
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.Order">
            <summary>
            Gets the collection order.
            All nodes form each children collection stay together.
            groups are ordered by this field (higher order - goes to the bottom in view)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.ForceExpanded">
            <summary>
            Gets a value indicating whether the children should always be visible under the node.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.GetCollectionAsync">
            <summary>
            Gets the collection of children nodes.
            </summary>
            <returns>A task that completes when the operation is done.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView">
            <summary>
            Interface implemented by external entities to provide a new view of a workspace.
            </summary>
            <remarks>
            This interface should be exported with an <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportCustomViewProviderAttribute"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView.IsAvailable">
            <summary>
            Indicates if this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/> is available for use or not.
            </summary>
            <remarks>
            Fires <see cref="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView.OnIsAvailableChanged"/> when this property changes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView.OnIsAvailableChanged">
            <summary>
            Event that fires as <see cref="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView.IsAvailable"/> changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView.DisplayName">
            <summary>
            Returns the visible name for a view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileNode">
            <summary>
            Implemented by nodes that represent a file on disk
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileNode.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileSystemNode">
            <summary>
            Implemented by nodes that represent file system objects
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileSystemNode.FullPath">
            <summary>
            Full path to the item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFolderNode">
            <summary>
            Implemented by nodes that represent a folder on disk
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFolderNode.FolderName">
            <summary>
            The folder name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer2">
            <summary>
            Additional properties for <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer2.NodeFilters">
            <summary>
            Gets the filters to apply on nodes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer">
            <summary>
            represent workspace node container (tree view currently).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.JTF">
            <summary>
            Gets the shared task factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.NodeExtenders">
            <summary>
            Gets the node extenders available in the current view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.Selection">
            <summary>
            Gets the currently selected nodes in the tree view. Can be empty or contain one or more nodes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.WorkspaceClosing">
            <summary>
            Gets a cancellation which is set when workspace is closing. Meant to be used in background task to provide fast exit when closing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.ShowAll">
            <summary>
            Gets the state for "Show all files".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.SelectNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Select the given node (as first item in selection)
            </summary>
            <param name="node">the node we want to select</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.ShouldDisableSpecialKeysHandling">
            <summary>
            Where to suppress command routing for special keys (such Delete).
            For example when the underlying control is in "rename" mode.
            </summary>
            <returns>true to suppress the special key routing</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.TryInitiateRenameNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Start renaming a particular node
            </summary>
            <param name="node">the node we want to rename</param>
            <returns>true if renaming was entered, false if not (if it is not applicable)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.SetExpansionStateForNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase,System.Boolean,System.Boolean)">
            <summary>
            set the expansion state of a node
            </summary>
            <param name="node">The node whose expansion state is to be changed.</param>
            <param name="expanded">true = expanded, false = collapsed</param>
            <param name="recursive">apply the state for children</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender">
            <summary>
            Extender for a node.
            Can add a children or command handlers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender.ProvideChildren(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            If applicable provides children to a node.
            Children collection can be actually empty at this point.
            </summary>
            <param name="parentNode">node to be extended</param>
            <returns>collection if applicable, null otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender.ProvideCommandHandler(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            if applicable provides a node with a command handler.
            </summary>
            <param name="parentNode">node to extend</param>
            <returns>command handler, or null</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender2">
            <summary>
            INodeExtender2 interface to extend <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender" /> interface to allow a customized action on double click
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender2.ProvideAction(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Return an action for a node when enter/double-click
            </summary>
            <param name="node">The node being invoked</param>
            <returns>Callback to use for the node</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomViewMetadata">
            <summary>
            Metadata for an <see cref="T:Microsoft.VisualStudio.Workspace.IWorkspaceProviderFactory`1"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomViewMetadata.ViewName">
            <summary>
            View this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/> creates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtenderMetadata">
            <summary>
            Optional metadata for <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender"/>s
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtenderMetadata.ViewNames">
            <summary>
            Views this <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender"/> belongs to.
            </summary>
            <remarks>
            The default view is <see cref="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.KnownViews.PhysicalTree"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter">
            <summary>
            Hides nodes visually in the Solution Explorer for Open Folder.
            </summary>
            <remarks>
            If the filter implements <see cref="T:System.IDisposable"/>, it will be disposed when the
            filter selection changes.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter.OnFilterUpdated">
            <summary>
            Occurs when the underlying filter logic changes. Visual Studio will
            refresh the Solution Explorer using this same filter instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter.IsVisible(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Keeps or removes a node from the Solution Explorer tree visualization.
            </summary>
            <param name="node">A UI node to check for filtering rules.</param>
            <returns>
            <c>true</c> if the node should be visible, or <c>false</c> if it should be hidden.
            </returns>
            <remarks>
            <para>
            Even if an <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/> returns <c>true</c>, a given node may be hidden
            for other reasons such as another active filter. A filter is only used for removal of
            nodes and not for requiring a node to be shown.
            </para>
            <para>
            When choosing to filter a node or not, it's useful to check the node's type. If the type is one
            recognized by the filter, such as <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileSystemNode"/> or a custom type, then
            the filter should apply the appropriate logic. If the type is not recognized, then it's up to the
            filter to decide if the node should be filtered or not. The recommended practice is to
            not filter unrecognized nodes.
            </para>
            <para>
            This does not filter the Solution Explorer for opened solution and projects.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterProvider">
            <summary>
            Creates node filters for the Solution Explorer in Open Folder.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterProvider.OnIsFilterAvailableChanged">
            <summary>
            Occurs when the provider should be asked for a new <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/>
            instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterProvider.IsFilterAvailable">
            <summary>
            Gets if the conditions to create a filter are met. When this is <c>true</c>,
            the Solution Explorer in Open Folder will enable the button for this filter provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterProvider.CreateFilter">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/> that can be used by
            the Solution Explorer. A new filter will be requested each time the active
            filter changes.
            </summary>
            <returns>A new filter.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterMetadata">
            <summary>
            Metadata describing the scope and activation of an <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterMetadata.FilterCommandGroup">
            <summary>
            Gets the command group for the filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterMetadata.FilterCommandId">
            <summary>
            Gets the command ID for the filter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute">
            <summary>
            Exports a <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilterProvider"/>
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeFilter"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute"/> class.
            </summary>
            <param name="type">The unique type for this export such as a <c>Guid</c></param>
            <param name="filterCommandGroup">Command group for your filter.</param>
            <param name="filterCommandId">Command ID for your filter.</param>
            <remarks>
            <para>
            Place the button in the Solution Explorer toolbar using the following in your .vsct file:
            <code>
            &lt;Button guid=&quot;FilterCommandGroup&quot; id=&quot;FilterCommandId&quot; priority=&quot;0x0400&quot; type=&quot;Button&quot;&gt;
                &lt;Parent guid = &quot; guidSHLMainMenu&quot; id=&quot;IDG_VS_TOOLBAR_PROJWIN_FILTERS&quot; /&gt;
                &lt;Icon guid = &quot; guidImages&quot; id=&quot;bmpPic1&quot; /&gt;
                &lt;Strings&gt;
                    &lt;ButtonText&gt;FileNameFilter&lt;/ButtonText&gt;
                &lt;/Strings&gt;
            &lt;/Button&gt;
            </code>
            </para>
            <para>
            The command handling will be performed by the Solution Explorer itself. By using the .vsct
            button placement, users will be able to assign a single shortcut for both Solution and
            Open Folder experiences.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute.FilterCommandGroup">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute.FilterCommandId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ExportNodeFilterAttribute.OptionFlagsInternal">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode">
            <summary>
            Abstract the UI framework object that holds a visual node into the particular container
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.WorkspaceVisualNode">
            <summary>
            the workspace node object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.RealizedChildren">
            <summary>
            collection of currently visible children
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.Text">
            <summary>
            Node text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.ToolTipText">
            <summary>
            Node ToolTip
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.FontStyle">
            <summary>
            font style of the text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.FontWeight">
            <summary>
            font weight of the text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.IsCut">
            <summary>
            item is in a "cut" state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.IsExpandable">
            <summary>
            If true, node will have [+] expander shown, and can be expanded and collapsed in view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetExpandedIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item when it is expanded
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetStateIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item state (small icon on the left)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetOverlayIcon(System.Guid,System.Int32)">
            <summary>
            Set overlay icon for the item (small icon in the bottom corner)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.AddChildrenGroup">
            <summary>
            create a new children group
            A children group can contain any number of children that will always be displayed together.
            Groups will be ordered by creation sequence.
            </summary>
            <returns>group id</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.EmptyAllChildrenGroups">
            <summary>
            remove all children
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.RemoveAllChildrenGroups">
            <summary>
            remove all children groups. (used in cases like deleting a node to immediately remove its children from visualization)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.UpdateChildrenGroupAsync(System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase})">
            <summary>
            Update the children in a children group. The UI node will attempt to make a minimal changes
            </summary>
            <param name="groupId">group id (as returned by AddChildrenGroup)</param>
            <param name="newCollection">the new list of children</param>
            <returns>async progress</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler">
            <summary>
            adds a command handling associated with a node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.Priority">
            <summary>
            Priority is used in command routing among multiple handlers. Higher priority means a handler will be called first.
            The first handler to acknowledge it support the command will stop the routing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.IgnoreOnMultiselect">
            <summary>
            If true, the command handler will be ignored when multi selection. If all command handlers for a node state to ignore on multi select,
            node will be removed from selection.
            Still if node has no command handlers at all it will cancel command routing for entire selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.QueryStatus(System.Collections.Generic.List{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase},System.Guid,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Tailored helper for IOleCommandTarget.QueryStatus
            </summary>
            <param name="selection">selected nodes</param>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="cmdf">commands flags (such Visible/Latched etc)</param>
            <param name="customTitle">for dynamic title commands</param>
            <returns>true when command is handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.Exec(System.Collections.Generic.List{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase},System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Tailored helper for IOleCommandTarget.Exec
            </summary>
            <param name="selection">selected nodes</param>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="nCmdexecopt">vs stuff</param>
            <param name="pvaIn">inputs (such us when executed from Command window with arguments)</param>
            <param name="pvaOut">outputs</param>
            <returns>execution HResult, OLECMDERR_E_NOTSUPPORTED if handler does not support it (which means controller will try next handler).</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.KnownViews">
            <summary>
            Constants related to <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.ICustomView"/> views.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.KnownViews.PhysicalTree">
            <summary>
            Default view when not specified. Refers to the actual files and folders on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.KnownViews.All">
            <summary>
            Special constant meaning all views. Used to indicate an <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender"/> belongs to all possible views.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase">
             <summary>
             This is the base class that we'll use for all Explorer "nodes" we want to show in the context of Workspace tree views.
             represent a single node in workspace tree view (node can be anything we decide going forward) aka
             Folder
             File
             Virtual node (aka named group, for pins or whatever)
             etc ..
            
             </summary>
            <summary>
            IDispose pattern for WorkspaceVisualNodeBase
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.MonikerSeparator">
            <summary>
            Full mode moniker separator character
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.#ctor(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase"/> class.
            Used by nodes that are children
            </summary>
            <param name="parent">parent node</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.#ctor(Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase"/> class.
            Used by root nodes
            </summary>
            <param name="container">hosting tree view</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Text">
            <summary>
             the node text;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsSourcesInitialized">
            <summary>
            true if children are refreshed at least once.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InTransition">
            <summary>
            Node represent object in transition (aka deleting, name setting, etc)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Container">
            <summary>
            Hosting tree view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Parent">
            <summary>
            Parent node (not needed for UI, just for us)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Root">
            <summary>
            Root node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Workspace">
            <summary>
            Workspace object this node belongs to
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NodeMoniker">
            <summary>
            Persistence moniker for the node. It is expected to be unique among the children nodes with the same parent.
            This moniker can be used to identify the node under a "parent". Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NodeFullMoniker">
            <summary>
            "Full" persistence moniker can identify the node under entire workspace. Will be null if node's moniker or any of it's parents monikers are null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CommandHandlers">
            <summary>
            Command handlers associated with this code. To be consulted if node is part of selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsExpandable">
            <summary>
            If true, node will have [+] expander shown, and can be expanded and collapsed in view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsExpanded">
            <summary>
            Whether node is currently expanded
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Items">
            <summary>
            Children collection property (will be accessed by XAML)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ItemsInternal">
            <summary>
            Internal item's collection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsDefaultExpanded">
            <summary>
            node should be expanded by default
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.VSSelectionKind">
            <summary>
            Type of the node of VS selection. If Empty, node won't participate in the VSSelection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.VSSelectionMoniker">
            <summary>
            the URL to use for vs selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SupportsRename">
            <summary>
             whether the item supports rename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ProvisionalViewingStatus">
            <summary>
            provisional status if node support invoke
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InvokeAction">
            <summary>
            Invoke action if supported (double-click, enter)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ValidateCounter">
            <summary>
            Get the validation count of the children of this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AlwaysExpandable">
            <summary>
            true if the node is always expandable even if there is no children (such us the workspace node).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.HardRefresh">
            <summary>
            Node require add/remove to refresh
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.UINode">
            <summary>
            The UI container object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetParentMoniker(System.String,System.String@,System.String@)">
            <summary>
            Utility to extract the parent parts from a full moniker string.
            </summary>
            <param name="fullNodeMoniker">a node full moniker</param>
            <param name="nodeMoniker">individual node moniker</param>
            <param name="parentMoniker">parents full moniker</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SplitMoniker(System.String)">
            <summary>
            Utility to break the fullMoniker to parts (containing on individual nodeMonikers of all parents, starting from root).
            </summary>
            <param name="fullNodeMoniker">a node full moniker</param>
            <returns>individual monikers of all node's parent and node itself that starting from the root</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetIcon(System.Guid,System.Int32)">
            <summary>
            Default Icon
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetExpandedIcon(System.Guid,System.Int32)">
            <summary>
            Icon to use when "Expanded" in the view
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetOverlayIcon(System.Guid,System.Int32)">
            <summary>
            Icon to provide additional icon adornment (normally shown in the corner of the other icon)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetStateIcon(System.Guid,System.Int32)">
            <summary>
            Small icon on the left (like source control check-out state)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.RefreshStatus">
            <summary>
            Update to the latest visual representation (icons and such).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Invalidate">
            <summary>
            invalidate the children collection. Note that this does not trigger an refresh,
            it will just indicate that the node is out of sync.
            </summary>
            <returns>the invalidation count, it can be used to compare with ValidateCounter to determine if the change that caused invalidation is processed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetRealizedChild(System.String)">
            <summary>
            Get a child node with a given moniker.
            </summary>
            <param name="nodeMoniker">child's persistence moniker</param>
            <returns>a child Node with the passed moniker if exists</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Compare(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Comparison of the two nodes. Used for low impact refresh.
            </summary>
            <param name="right">the node to compare to</param>
            <returns>-1 if less, 0 - equal, 1 if bigger</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Refresh(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Called on refresh, when a "new node" is created but considered equal.
            This give opportunity to "refresh" some non-essential properties from the newer object
            (like capitalization)
            </summary>
            <param name="recent">an node recently created to represent same underlying object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InitExtensions(Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode)">
            <summary>
            Initialize Extension Providers for this node
            </summary>
            <param name="uiNode">the UI container object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.RefreshChildrenSourcesAsync">
            <summary>
            Recreates the list of children sources in use
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnChildrenCollectionChanged">
            <summary>
            called by UI control host when children collection changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CollapseAll(System.Boolean)">
            <summary>
            Collapse all the children (recursively) of a node (and optionally the node itself)
            </summary>
            <param name="childrenOnly">only collapse children, not the node itself</param>
            <returns>void</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.RefreshChildrenAsync(System.Boolean)">
            <summary>
            Initiate children refresh (can be async)
            </summary>
            <param name="recursive">true to trigger refresh on the children items as well (if they are being expanded already)</param>
            <returns>A task that completes when the operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.BeforeExpand">
            <summary>
            Called before node to be expanded in UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AfterCollapse">
            <summary>
            called after node is collapsed in UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.QueryStatus(System.Guid,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Command routing Query Status result for this node alone.
            </summary>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="cmdf">commands flags (such Visible/Latched etc)</param>
            <param name="customTitle">for dynamic title commands</param>
            <returns>true when command is handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Exec(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Command routing Exec on this node.
            </summary>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="nCmdexecopt">vs stuff</param>
            <param name="pvaIn">inputs (such us when executed from Command window with arguments)</param>
            <param name="pvaOut">outputs</param>
            <returns>execution HResult, OLECMDERR_E_NOTSUPPORTED if handler does not support it (which means controller will try next handler)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetChildCollectionForProvider(Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender)">
            <summary>
            Get the child collection associated with a provider.
            </summary>
            <param name="provider">provider</param>
            <returns>associated children collection</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ApplyActionOnRealizedNodes(System.Action{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase})">
            <summary>
            Enumerate already realized nodes and execute an action
            </summary>
            <param name="nodeAction">the action to execute on already created node</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToAsync(System.String)">
            <summary>
            Navigate to child node or self representing <paramref name="fullPath"/>.
            Refresh (and realize) the nodes, if needed.
            </summary>
            <param name="fullPath">File system object to navigate to.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToMonikerWithRefreshAsync(System.String)">
            <summary>
            Navigate to child node or self as specified by full moniker.
            Refresh (and realize) the nodes, if needed.
            </summary>
            <param name="fullNodeMoniker">Full node moniker from root.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToMonikerNoRefresh(System.String)">
            <summary>
            Navigate to child node or self as specified by full moniker.
            Will not force refresh/realization of child nodes to find the target.
            </summary>
            <param name="fullNodeMoniker">Full node moniker from root.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this or if any parents nodes aren't realized.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetRenameLabel">
            <summary>
            Rename support
            </summary>
            <returns>the initial text in rename box</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.DoRename(System.String)">
            <summary>
            called to commit the rename (aka rename the underlying object and update the Text box)
            </summary>
            <param name="newName">the new name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CancelRename">
            <summary>
            called when rename is canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetDefaultSelectionLength(System.String)">
            <summary>
            get the default selection length for rename box (aka files will select the text before the last ".")
            </summary>
            <param name="label">the current name</param>
            <returns>the desired selected area length</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetLogger">
            <summary>
            Returns the logger to use for logging diagnostics information
            </summary>
            <returns>Logger to use for logging information</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnInitialized">
            <summary>
            called when node is initialized and hooked to UI control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ClearProviders">
            <summary>
            Clear the children providers, remove all children and command handlers.
            Node becomes inactive and just a visual hint.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnChildNodeExpandedStateChanged(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase,System.Boolean)">
            <summary>
            called on the root node when any inner children expansion changed.
            </summary>
            <param name="node">node that get expanded or collapsed</param>
            <param name="isExpanded">what is the current expansion state</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.BeforeChildrenRefresh">
            <summary>
            Called before populating of the children for this node
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AfterChildrenRefresh">
            <summary>
            Called after populating of the children for this node
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CreateChildrenSources">
            <summary>
            Recreates the list of children sources in use
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsDisposed">
            <summary>
            Gets a value indicating whether the object is being disposed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Dispose">
            <summary>
            <inheritdoc/>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Dispose(System.Boolean)">
            <summary>
            part of dispose pattern.
            </summary>
            <param name="disposing">true if called from Dispose()</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders">
            <summary>
            Class to define the providers to be used by a workspace factory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.FileScannerProviders">
            <summary>
            Get the FileScanner Providers
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.FileScannerFactories">
            <summary>
            Get the FileScanner Factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.FileContextProviderFactories">
            <summary>
            Get the File Context Factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.FileContextActionProviderFactories">
            <summary>
            Get the File Context Action Factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.LanguageServiceProviderFactories">
            <summary>
            Get the language service provider factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.WorkspaceServiceFactories">
            <summary>
            Get the Workspace Factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.SettingsExtenders">
            <summary>
            Get the settings extenders
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.PropertyEvaluatorFactories">
            <summary>
            Get the evaluator provider factories
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.VsWorkspaceFactoryProviders.NodeExtenders">
            <summary>
            Get the Node extenders
            </summary>
            <returns>List of node extenders that are in use for the default view.</returns>
        </member>
    </members>
</doc>
